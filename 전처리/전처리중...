c1<-read.csv("77.csv")
str(c1)
c2<-c1 %>% filter(gameDuration>=1200)
d1<-unique(c2$gameId)
mat_id<-d1[1]
j=1
k=1
cham_lane<-NULL
lane<-NULL
game<-NULL
df_lane<-NULL
for(k in 1:10){
  mat_id<-d1[k]
  RoitURL_mat <- paste0("https://kr.api.riotgames.com/lol/match/v4/matches/",mat_id)#,matches.gameId
  url_mat <-paste0(RoitURL_mat, paste0("?api_key=", apikey))
  j_mat<-fromJSON(getURL(url_mat))
  # un_mat<-unlist(j_mat)
  # m_mat<-as.matrix(un_mat)
  # df_mat<-as.data.frame(m_mat)
  # df_mat<-t(df_mat)
  # aa_mat<-merge(aa_mat,df_mat,all = TRUE)
  # aa_mat[is.na(aa_mat)]<-0##결측치 처리
  a99<-j_mat[["gameId"]]
  a0<-j_mat[8]
  a1<-j_mat[[12]][[6]][10]
  a2<-j_mat[[12]][[6]][11]
  a3<-j_mat[[12]][[6]][12]
  a4<-j_mat[[12]][[6]][22]
  a5<-j_mat[[12]][[6]][36]
  a6<-j_mat[[12]][[6]][38]
  a7<-j_mat[[12]][[6]][42]
  a8<-j_mat[[12]][[6]][52]
  a9<-j_mat[["participants"]][["stats"]][["win"]]
  j<-3
  for(j in c(1:10)){
    RoitURL_mat_lane <- paste0("https://kr.api.riotgames.com/lol/match/v4/timelines/by-match/",mat_id)#,matches.gameId
    url_mat_lane <-paste0(RoitURL_mat_lane, paste0("?api_key=", apikey))
    j_mat_lane<-fromJSON(getURL(url_mat_lane))
    a<-j_mat_lane[["frames"]]
    z1<-NULL
    z1$x<-a$participantFrames[,j]$position[,1]
    z1$y<-a$participantFrames[,j]$position[,2]
    z1<-as.data.frame(z1)
    z1<-head(z1,15)
    z1<-z1[-1,]
    
  #   install.packages("png")
  #   library(png)
  #   m<-readPNG("map11.png")
  #   class(m)
  #   dim(m)
  #   m<-as.raster(m[,,1:3])
  #   class(m)
  #   dim(m)
  # plot(-120:15000, type='n')
  # m<-rasterImage(as.raster(m[,,]), -120, -120, 15000, 15000, interpolate=FALSE)
  # plot(m)
  # z1 %>% ggplot(aes(x=z1$x, y=z1$y)) + geom_point()+xlim(-120,14870)+ylim(-120,14980)
  
    i<-1
    TOP<-0
    JUNGLE<-0
    MID<-0
    BOT_CARRY<-0
    SUP<-0
    View(j_mat)
    lane<-data.frame(TOP,JUNGLE,MID,BOT_CARRY,SUP)
    if (j_mat[["participants"]][["spell1Id"]][j]==11 |
        j_mat[["participants"]][["spell2Id"]][j]==11 ){
      lane$JUNGLE<-lane$JUNGLE+20
    }else if (j_mat[["participants"]][["stats"]][["totalMinionsKilled"]][j]==max(j_mat[["participants"]][["stats"]][["visionScore"]][c(1:5)]) |
              j_mat[["participants"]][["stats"]][["totalMinionsKilled"]][j]==max(j_mat[["participants"]][["stats"]][["visionScore"]][c(6:10)])){
      lane$SUP<-lane$SUP+20
    }
    
    for(i in c(1:14)){
      if (z1$x[i]>=600 & z1$x[i]<=1800 &
          z1$y[i]>=8400 & z1$y[i]<=14100) {
        lane$TOP<-lane$TOP+1
      }
      else if (z1$x[i]>=600 & z1$x[i]<=4500 &
               z1$y[i]>=10200 & z1$y[i]<=14400) {
        lane$TOP<-lane$TOP+3
      }
      else if (z1$x[i]>=900 & z1$x[i]<=6000 &
               z1$y[i]>=13200 & z1$y[i]<=14400) {
        lane$TOP<-lane$TOP+1
      }
      else if (z1$x[i]>=4850 & z1$x[i]<=10000 &
               z1$y[i]>=4850 & z1$y[i]<=12000)  {
        lane$MID<-lane$MID+1
      }
      else if (z1$x[i]>=5600 & z1$x[i]<=8850 &
               z1$y[i]>=6000 & z1$y[i]<=8700) {
        lane$MID<-lane$MID+3
      }
      
      else if (z1$x[i]>=6500 & z1$x[i]<=9600 &
               z1$y[i]>=7000 & z1$y[i]<=9300){
        lane$MID<-lane$MID+1
      }
      else if (z1$x[i]>=3800 & z1$x[i]<=6600 &
               z1$y[i]>=4500 & z1$y[i]<=6700){
        lane$MID<-lane$MID+1
      }
      else if (z1$x[i]>=5000 & z1$x[i]<=10000 &
               z1$y[i]>=450 & z1$y[i]<=15000){
        lane$BOT_CARRY<-lane$BOT_CARRY+1
      }
      else if (z1$x[i]>=10000 & z1$x[i]<=14700&
               z1$y[i]>=600 & z1$y[i]<=5000){
        lane$BOT_CARRY<-lane$BOT_CARRY+3
      }
      else if (z1$x[i]>=5000 & z1$x[i]<=14700&
               z1$y[i]>=1350 & z1$y[i]<=14700) {
        lane$BOT_CARRY<-lane$BOT_CARRY+1
      }
      else{
        lane$MID<-lane$MID+1
      }
    }
   df_lane<-rbind(df_lane,lane) 
  }
  #View(df_lane)
  
}

View(df_lane)
 
  
# 너무어렵다... 라이너들의 좌표가 여기저기있는경우가많아 라인정립을 위한방법을 다시 생각해봐야되는건가 싶다..
데이터분석사이트들은 어떻게 정하는걸까..
  
   
