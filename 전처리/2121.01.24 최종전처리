
cm<-read.csv("champ.csv")#챔프이름,번호 csv

c1<-read.csv("master_gameid.csv")#gameid있는 csv
View(c1)
str(c1)
c1<-c1 %>% filter(gameDuration >= 1200)
d1<-unique(c1$gameId)
length(d1)
#mat_id<-d1[3]

j=1
k=1
game<-NULL

p<-1

for(p in c(1:1000)){
  ababab<-try(
for(k in 1:length(d1)){
  mat_id<-d1[k]
  df_lane<-NULL
  bot<-NULL
  
  #게임내용관련데이터 칼럼불러오기
  RoitURL_mat <- paste0("https://kr.api.riotgames.com/lol/match/v4/matches/",mat_id)#,matches.gameId
  url_mat <-paste0(RoitURL_mat, paste0("?api_key=", apikey))
  j_mat<-fromJSON(getURL(url_mat))
  
  # un_mat<-unlist(j_mat)
  # m_mat<-as.matrix(un_mat)
  # df_mat<-as.data.frame(m_mat)
  # df_mat<-t(df_mat)
  # df_mat<-as.data.frame(df_mat)
  
  #좌표관련데이터 칼럼불러오기
  RoitURL_mat_lane <- paste0("https://kr.api.riotgames.com/lol/match/v4/timelines/by-match/",mat_id)#,matches.gameId
  url_mat_lane <-paste0(RoitURL_mat_lane, paste0("?api_key=", apikey))
  j_mat_lane<-fromJSON(getURL(url_mat_lane))
  

  a99<-j_mat[["gameId"]]
  a0<-j_mat[["gameVersion"]]
  a1<-j_mat[["participants"]][["stats"]][["kills"]]
  a2<-j_mat[["participants"]][["stats"]][["deaths"]]
  a3<-j_mat[["participants"]][["stats"]][["assists"]]
  a4<-j_mat[["participants"]][["stats"]][["totalDamageDealt"]]
  a5<-j_mat[["participants"]][["stats"]][["visionScore"]]
  a6<-j_mat[["participants"]][["stats"]][["totalDamageTaken"]]
  a7<-j_mat[["participants"]][["stats"]][["goldEarned"]]
  a8<-j_mat[["participants"]][["stats"]][["visionWardsBoughtInGame"]]
  a9<-j_mat[["participants"]][["stats"]][["win"]]
  a10<-j_mat[["participants"]][["championId"]]
  a12<-j_mat[["participants"]][["stats"]][["firstBloodKill"]]
  a13<-j_mat[["participants"]][["teamId"]]
  a14<-j_mat[["teams"]][["firstDragon"]]
  a15<-j_mat[["participants"]][["stats"]][["firstTowerKill"]]

  a11<-NULL
  for (c in c(1:10)){
    qwer<-cm %>% filter(number == a10[c]) %>% select(name)
    a11<-rbind(a11,qwer)  
    qwer<-NULL
  } #챔프id로 챔프목록csv연결해서 name칼럼 생성
  
 
  
               
  j=1
  for(j in c(1:10)){
    
    a<-j_mat_lane[["frames"]]
    z1<-NULL
    z1$x<-a$participantFrames[,j]$position[,1]
    z1$y<-a$participantFrames[,j]$position[,2]
    z1<-as.data.frame(z1)
    z1<-head(z1,15)
    z1<-z1[-1,]
    
    i=1
    TOP<-0
    JUNGLE<-0
    MID<-0
    BOT_CARRY<-0
    SUP<-0
    lane<-data.frame(TOP,JUNGLE,MID,BOT_CARRY,SUP)
  #   install.packages("png")
  #   library(png)
  #   m<-readPNG("map11.png")
  #   class(m)
  #   dim(m)
  #   m<-as.raster(m[,,1:3])
  #   class(m)
  #   dim(m)
  # plot(-120:15000, type='n')
  # m<-rasterImage(as.raster(m[,,]), -120, -120, 15000, 15000, interpolate=FALSE)
  # plot(m)
  # z1 %>% ggplot(aes(x=x, y=y)) + geom_point()+xlim(-120,14870)+ylim(-120,14980)
    
    if (j_mat[["participants"]][["spell1Id"]][j]==11 |
        j_mat[["participants"]][["spell2Id"]][j]==11 ){
      lane$JUNGLE<-lane$JUNGLE+50 #강타
      lane$BOT_CARRY<-lane$BOT_CARRY-50
      lane$SUP<-lane$SUP-100
    }else if (j_mat[["participants"]][["stats"]][["visionScore"]][j]==max(j_mat[["participants"]][["stats"]][["visionScore"]][c(1:5)]) |
              j_mat[["participants"]][["stats"]][["visionScore"]][j]==max(j_mat[["participants"]][["stats"]][["visionScore"]][c(6:10)])){
      lane$SUP<-lane$SUP+50#시야점수
      lane$BOT_CARRY<-lane$BOT_CARRY-50   
    } 
    if (j_mat[["participants"]][["stats"]][["goldEarned"]][j]==min(j_mat[["participants"]][["stats"]][["goldEarned"]][c(1:5)]) |
             j_mat[["participants"]][["stats"]][["goldEarned"]][j]==min(j_mat[["participants"]][["stats"]][["goldEarned"]][c(6:10)])){
      lane$SUP<-lane$SUP+30#시야점수
      lane$BOT_CARRY<-lane$BOT_CARRY-50   
    }
    
    
    if (j_mat[["participants"]][["spell1Id"]][j]==12 |
        j_mat[["participants"]][["spell2Id"]][j]==12 ){
      lane$BOT_CARRY<-lane$BOT_CARRY-7#텔포
    }
    if (j_mat[["participants"]][["spell1Id"]][j]==7 |
        j_mat[["participants"]][["spell2Id"]][j]==7 ){
      lane$BOT_CARRY<-lane$BOT_CARRY+6#힐
    }
    if (j_mat[["participants"]][["spell1Id"]][j]==1 |
        j_mat[["participants"]][["spell2Id"]][j]==1 ){
      lane$BOT_CARRY<-lane$BOT_CARRY+2#클린즈
    }
    if (j_mat[["participants"]][["spell1Id"]][j]!=4 |
         j_mat[["participants"]][["spell2Id"]][j]!=4 ){
      lane$BOT_CARRY<-lane$BOT_CARRY-10#점멸
    }
    if (j_mat[["participants"]][["spell1Id"]][j]==14 |
        j_mat[["participants"]][["spell2Id"]][j]==14 ){
      lane$BOT_CARRY<-lane$BOT_CARRY-8#점화
    }
    if (j_mat[["participants"]][["spell1Id"]][j]==3 |
        j_mat[["participants"]][["spell2Id"]][j]==3 ){
      lane$BOT_CARRY<-lane$BOT_CARRY-8#탈진
    }
    
    if (j_mat[["participants"]][["championId"]][j] == 145 |
        j_mat[["participants"]][["championId"]][j] == 202 |
        j_mat[["participants"]][["championId"]][j] == 360 |
        j_mat[["participants"]][["championId"]][j] == 21 |
        j_mat[["participants"]][["championId"]][j] == 22 |
        j_mat[["participants"]][["championId"]][j] == 523 |
        j_mat[["participants"]][["championId"]][j] == 81 |
        j_mat[["participants"]][["championId"]][j] == 119 |
        j_mat[["participants"]][["championId"]][j] == 51 |
        j_mat[["participants"]][["championId"]][j] == 429 |
        j_mat[["participants"]][["championId"]][j] == 29 |
        j_mat[["participants"]][["championId"]][j] == 222 |
        j_mat[["participants"]][["championId"]][j] == 498 |
        j_mat[["participants"]][["championId"]][j] == 110 |
        j_mat[["participants"]][["championId"]][j] == 96 ){
      lane$BOT_CARRY<-lane$BOT_CARRY+8#챔프 가산점
      lane$MID<-lane$MID-20
    }
    
    if (j_mat[["participants"]][["championId"]][j] == 67 &
        j_mat[["participants"]][["spell1Id"]][j]==7 |
        j_mat[["participants"]][["spell2Id"]][j]==7
        ){
      lane$BOT_CARRY<-lane$BOT_CARRY+6#베인
      lane$MID<-lane$MID-20
    }
    
    if (j_mat[["participants"]][["championId"]][j] == 236 &
        j_mat[["participants"]][["spell1Id"]][j]==7 |
        j_mat[["participants"]][["spell2Id"]][j]==7){
      lane$BOT_CARRY<-lane$BOT_CARRY+6#루시안
      lane$MID<-lane$MID-20
    }
    
    if (j_mat[["participants"]][["championId"]][j] == 18 &
        j_mat[["participants"]][["spell1Id"]][j]==7 |
        j_mat[["participants"]][["spell2Id"]][j]==7 ){
      lane$BOT_CARRY<-lane$BOT_CARRY+6#트타
      lane$MID<-lane$MID-20
    }
    
    if (j_mat[["participants"]][["championId"]][j] == 235 &
        j_mat[["participants"]][["spell1Id"]][j]==7 |
        j_mat[["participants"]][["spell2Id"]][j]==7){
      lane$BOT_CARRY<-lane$BOT_CARRY+6#세나
      lane$MID<-lane$MID-20
    }
    
    
    for(i in c(1:11)){
      if (z1$x[i]>=600 & z1$x[i]<=1800 &
          z1$y[i]>=8400 & z1$y[i]<=14100) {
        lane$TOP<-lane$TOP+1
      }
      else if (z1$x[i]>=600 & z1$x[i]<=4500 &
               z1$y[i]>=10200 & z1$y[i]<=14400) {
        lane$TOP<-lane$TOP+1
      }
      else if (z1$x[i]>=900 & z1$x[i]<=6000 &
               z1$y[i]>=13200 & z1$y[i]<=14400) {
        lane$TOP<-lane$TOP+1
      }
      else if (z1$x[i]>=4850 & z1$x[i]<=10000 &
               z1$y[i]>=4850 & z1$y[i]<=12000)  {
        lane$MID<-lane$MID+1
      }
      else if (z1$x[i]>=5600 & z1$x[i]<=8850 &
               z1$y[i]>=6000 & z1$y[i]<=8700) {
        lane$MID<-lane$MID+1
      }
      
      else if (z1$x[i]>=6500 & z1$x[i]<=9600 &
               z1$y[i]>=7000 & z1$y[i]<=9300){
        lane$MID<-lane$MID+1
      }
      else if (z1$x[i]>=3800 & z1$x[i]<=6600 &
               z1$y[i]>=4500 & z1$y[i]<=6700){
        lane$MID<-lane$MID+1
      }
      else if (z1$x[i]>=5000 & z1$x[i]<=10000 &
               z1$y[i]>=200 & z1$y[i]<=15000){
        lane$BOT_CARRY<-lane$BOT_CARRY+1
      }
      else if (z1$x[i]>=10000 & z1$x[i]<=14700&
               z1$y[i]>=600 & z1$y[i]<=5000){
        lane$BOT_CARRY<-lane$BOT_CARRY+1
      }
      else if (z1$x[i]>=5000 & z1$x[i]<=14700&
               z1$y[i]>=1350 & z1$y[i]<=14700) {
        lane$BOT_CARRY<-lane$BOT_CARRY+1
      }
      else{
        lane$MID<-lane$MID+1
      }
      
    } #for (i in 1:15)
   df_lane<-rbind(df_lane,lane)
   
  } #for (j in 1:10)
  
  bot<-cbind(a99,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a15,df_lane)
  
  bot$F_DRG[1:5]<-j_mat[["teams"]][["firstDragon"]][1]
  bot$F_DRG[6:10]<-j_mat[["teams"]][["firstDragon"]][2]
  
  bot_1<-bot[1:5,]
  bot_2<-bot[6:10,]
  bot_1<-bot_1 %>% 
    mutate(AD=bot_1[which.max(bot_1$BOT_CARRY),"name"],SUPP=bot_1[which.max(bot_1$SUP),"name"]) %>% 
    filter(bot_1$name == bot_1[which.max(bot_1$BOT_CARRY),"name"] | bot_1$name == bot_1[which.max(bot_1$SUP),"name"]) %>% 
    arrange(desc(a7)) %>%
    mutate(s_kills=a1[2],s_deaths=a2[2],s_assists=a3[2]) %>%
    rename(ad_num=a10, ad_kills=a1, ad_deaths=a2, ad_assists=a3, gameid=a99, result=a9, First_kill=a12, team=a13,First_tkill=a15, totalDamageDealt=a4, visionScore=a5, totalDamageTaken=a6, goldEarned=a7, visionWardsBoughtInGame=a8) %>%
    mutate(
      Damage=(totalDamageDealt[1]+totalDamageDealt[2])/2,
      visionScore_2=(visionScore[1]+visionScore[2])/2,
      DamageTaken=(totalDamageTaken[1]+totalDamageTaken[2])/2,
      goldEarned_2=(goldEarned[1]+goldEarned[2])/2,
      visionWardsBoughtInGame_2=(visionWardsBoughtInGame[1]+visionWardsBoughtInGame[2])/2) %>%
      mutate(sup_num=ad_num[2]) %>%
   select(gameid, team, result, F_DRG, First_kill, First_tkill, ad_num, sup_num, AD, SUPP, ad_kills, ad_deaths, ad_assists, s_kills, s_deaths, s_assists, goldEarned_2, Damage, DamageTaken, visionScore_2, visionWardsBoughtInGame_2) %>%
   head(1)
   
  
  bot_2<-bot_2 %>% 
    mutate(AD=bot_2[which.max(bot_2$BOT_CARRY),"name"],SUPP=bot_2[which.max(bot_2$SUP),"name"]) %>% 
    filter(bot_2$name == bot_2[which.max(bot_2$BOT_CARRY),"name"] | bot_2$name == bot_2[which.max(bot_2$SUP),"name"]) %>% 
    arrange(desc(a7)) %>%
    mutate(s_kills=a1[2],s_deaths=a2[2],s_assists=a3[2]) %>%
    rename(ad_num=a10, ad_kills=a1, ad_deaths=a2, ad_assists=a3, gameid=a99, result=a9, First_kill=a12, team=a13,First_tkill=a15, totalDamageDealt=a4, visionScore=a5, totalDamageTaken=a6, goldEarned=a7, visionWardsBoughtInGame=a8) %>%
    mutate(
      Damage=(totalDamageDealt[1]+totalDamageDealt[2])/2,
      visionScore_2=(visionScore[1]+visionScore[2])/2,
      DamageTaken=(totalDamageTaken[1]+totalDamageTaken[2])/2,
      goldEarned_2=(goldEarned[1]+goldEarned[2])/2,
      visionWardsBoughtInGame_2=(visionWardsBoughtInGame[1]+visionWardsBoughtInGame[2])/2) %>%
    mutate(sup_num=ad_num[2]) %>%
    select(gameid, team, result, F_DRG, First_kill, First_tkill, ad_num, sup_num, AD, SUPP, ad_kills, ad_deaths, ad_assists, s_kills, s_deaths, s_assists, goldEarned_2, Damage, DamageTaken, visionScore_2, visionWardsBoughtInGame_2) %>%
    head(1)
  
  
  rr<-df_lane[1:5,] %>% filter(BOT_CARRY == max(BOT_CARRY) | SUP == max(SUP))
  rr_2<-df_lane[6:10,] %>% filter(BOT_CARRY == max(BOT_CARRY) | SUP == max(SUP))
  if(nrow(rr) == 2 & nrow(rr_2) == 2){
    game<-rbind(game,bot_1)
    game<-rbind(game,bot_2)
  }else {
  }
  
  
  rr<-NULL
  rr_2<-NULL
  
} # for (k in 1:10)
,silent = T
)
  if(class(ababab)=="try-error"){
    Sys.sleep(120)
  }
}


##############
View(game) 
str(game)

write.csv(game,"game30.csv",row.names = F)
##############################################################
#

game2<-read.csv("game30.csv")
head(game2,20)
View(game2)
##TRUE,FALSE -> 1,0 으로 교체후 숫자형으로 변환
game2$result<-str_replace_all(game2$result,"TRUE","1")
game2$result<-str_replace_all(game2$result,"FALSE","0")
game2$result<-as.factor(game2$result)

game2$F_DRG<-str_replace_all(game2$F_DRG,"TRUE","1")
game2$F_DRG<-str_replace_all(game2$F_DRG,"FALSE","0")
game2$F_DRG<-as.factor(game2$F_DRG)

game2$First_kill<-str_replace_all(game2$First_kill,"TRUE","1")
game2$First_kill<-str_replace_all(game2$First_kill,"FALSE","0")
game2$First_kill<-as.factor(game2$First_kill)

game2$First_tkill<-str_replace_all(game2$First_tkill,"TRUE","1")
game2$First_tkill<-str_replace_all(game2$First_tkill,"FALSE","0")
game2$First_tkill<-as.factor(game2$First_tkill)

str(game2)
View(game2)

game3<-game2 %>% select(-X,-AD,-SUPP)
game3<-game3 %>% mutate(cham_num=paste0(game3$ad_num," ",game3$sup_num))
View(game3)
